// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  orders     Order[]
  createAt   DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model Billboard {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store      @relation(fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  billboardId String     @db.ObjectId
  billboard   Billboard  @relation(fields: [billboardId], references: [id])
  products    Product[]
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Size {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String     @db.ObjectId
  store     Store      @relation(fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Color {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String     @db.ObjectId
  store     Store      @relation(fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String      @db.ObjectId
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String      @db.ObjectId
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  productId String     @db.ObjectId
  product   Product    @relation(fields: [productId], references: [id])
  url       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String     @db.ObjectId
  order     Order      @relation(fields: [orderId], references: [id])
  productId String     @db.ObjectId
  product   Product    @relation(fields: [productId], references: [id])
}
